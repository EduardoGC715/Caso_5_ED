<!DOCTYPE html>
<meta charset="utf-8" />
<svg width="1920" height="1080"></svg>
<script src="https://d3js.org/d3.v4.min.js"></script>
<style>
    text {
        font-family: 'Poppins', sans-serif;
        font-size: 14px;
        font-weight: bold;
        fill: black;
    }
</style>
<script>
    //initilize svg or grab svg
    var svg = d3.select("svg");
    var width = svg.attr("width");
    var height = svg.attr("height");

    var graphData = {
        nodes: [
            // PLACEHOLDER
        ],
        links: [
            // PLACEHOLDER
        ]
    };

    var simulation = d3
        .forceSimulation(graphData.nodes)
        .force("collide", d3.forceCollide().radius(40))
        .force("charge", d3.forceManyBody().strength(20))
        .force("center", d3.forceCenter(width / 2, height / 2))
        .force("link", d3.forceLink(graphData.links).id(d => d.name))
        .on("tick", ticked);

    var links = svg
        .append("g")
        .selectAll("line")
        .data(graphData.links)
        .enter()
        .append("line")
        .attr("stroke-width", 3)
        .attr('marker-end', 'url(#mark-end-arrow)')
        .style("stroke", "darkgrey");

    links.append("text").text(d => d.name);
    var defs = svg.append('svg:defs');
    defs.append('svg:marker')
        .attr('id', 'end-arrow')
        .attr('viewBox', '0 -5 10 10')
        .attr('refX', "32")
        .attr('markerWidth', 2)
        .attr('markerHeight', 2)
        .attr('orient', 'auto')
        .append('svg:path')
        .attr('d', 'M0,-L10,0L0,5')
        .style("fill", "darkgrey");

    // define arrow markers for leading arrow
    defs.append('svg:marker')
        .attr('id', 'mark-end-arrow')
        .attr('viewBox', '0 -5 10 10')
        .attr('refX', 20)
        .attr('markerWidth', 3.5)
        .attr('markerHeight', 3.5)
        .attr('orient', 'auto')
        .append('svg:path')
        .attr('d', 'M0,-5L10,0L0,5')
        .style("fill", "darkgrey");

    let color = [
        // PLACEHOLDER
    ];

    var nodes = svg
        .append("g")
        .selectAll("circle")
        .data(graphData.nodes)
        .enter()
        .append("circle")
        .attr("r", 12)
        .style("fill", function(d) {
            return color[d.colorID];
        });

    var texts = svg
        .append("g")
        .selectAll("text")
        .data(graphData.nodes)
        .enter()
        .append("text")
        .text(d => d.name);

    var drag = d3
        .drag()
        .on("start", dragstarted)
        .on("drag", dragged)
        .on("end", dragended);

    nodes.call(drag);

    function ticked() {
        texts.attr("x",d => d.x);
        texts.attr("y",d => d.y);
        //updating the position
        nodes
            .attr("cx", function(d) {
                return d.x;
            })
            .attr("cy", function(d) {
                return d.y;
            });

        links
            .attr("x1", function(d) {
                return d.source.x;
            })
            .attr("y1", function(d) {
                return d.source.y;
            })
            .attr("x2", function(d) {
                return d.target.x;
            })
            .attr("y2", function(d) {
                return d.target.y;
            });
        console.log(simulation.alpha());
    }

    function dragstarted(d) {
        //your alpha hit 0 it stops! make it run again
        simulation.alphaTarget(0.3).restart();
        d.fx = d3.event.x;
        d.fy = d3.event.y;
    }

    function dragged(d) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
    }

    function dragended(d) {
        // alpha min is 0, head there
        simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
    }
</script>